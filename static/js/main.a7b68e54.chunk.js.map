{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","phone","address","city","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handleSearchBoxChange","e","setState","searchMonstersField","target","value","state","string","fetch","then","response","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAceA,EATF,SAACC,GAAD,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,oCAA8EC,IAAI,YAC1F,6BAAKL,EAAMG,QAAQG,OACnB,+BAAQN,EAAMG,QAAQI,QACtB,+BAAQP,EAAMG,QAAQK,QACtB,oCAAQR,EAAMG,QAAQM,QAAQC,YCNzBC,EAAW,SAACX,GACxB,OACC,qBAAKC,UAAU,YAAf,SACED,EAAMY,SAASC,KAAI,SAACV,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCGRU,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACjB,uBACCf,UAAU,aACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CGG,E,kDA5Cd,aAAe,IAAD,8BACb,gBAiBDC,sBAAwB,SAACC,GACxB,EAAKC,SAAS,CAAEC,oBAAqBF,EAAEG,OAAOC,SAjB9C,EAAKC,MAAQ,CACZC,OAAQ,SACRf,SAAU,GACVW,oBAAqB,IALT,E,qDAUd,WAAqB,IAAD,OACnBK,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACNC,QAAQC,IAAI,aAAcF,GAC1B,EAAKV,SAAS,CAAEV,SAAUoB,S,oBAM7B,WACC,MAA0CG,KAAKT,MAAvCd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,oBAGZa,EAAmBxB,EAASyB,QAAO,SAAClC,GACzC,OAAOA,EAAQG,KACbgC,cACAC,SAAShB,EAAoBe,kBAEhC,OACC,sBAAKrC,UAAU,MAAf,UACC,cAAC,EAAD,CACCc,YAAY,kBACZC,aAAcmB,KAAKf,wBAEpB,6BAAKe,KAAKT,MAAMH,sBAChB,uBACA,cAAC,EAAD,CAAUX,SAAUwB,W,GAvCNI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a7b68e54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.scss';\r\n\r\n\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&bgset=bg1&size=180x180`} alt=\"Monster\" />\r\n        <h1>{props.monster.name}</h1>\r\n        <span>{ props.monster.email}</span>\r\n        <span>{ props.monster.phone}</span>\r\n        <h6>@ { props.monster.address.city}</h6>\r\n    </div>\r\n)\r\nexport default Card;","import React from 'react';\r\nimport './card-list.style.scss';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card-list\">\r\n\t\t\t{props.monsters.map((monster) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.scss';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n\t<input\r\n\t\tclassName=\"search-box\"\r\n\t\ttype=\"search\"\r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={handleChange}\r\n\t/>\r\n);\r\n\r\nexport default SearchBox;\r\n","import { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tstring: 'Hi Mia',\r\n\t\t\tmonsters: [],\r\n\t\t\tsearchMonstersField: '',\r\n\t\t};\r\n\t\t// if you are not using arrow function for the handleSearchBoxChange function, you have to bind 'this' to the function\r\n\t\t//this.handleSearchBoxChange = this.handleSearchBoxChange.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((users) => {\r\n\t\t\t\tconsole.log('monsters: ', users);\r\n\t\t\t\tthis.setState({ monsters: users });\r\n\t\t\t});\r\n\t}\r\n\thandleSearchBoxChange = (e) => {\r\n\t\tthis.setState({ searchMonstersField: e.target.value });\r\n\t};\r\n\trender() {\r\n\t\tconst { monsters, searchMonstersField } = this.state;\r\n\t\t//const monsters = this.state.monsters;\r\n\t\t//const searchMonstersField = this.state.searchMonstersField;\r\n\t\tconst filteredMonsters = monsters.filter((monster) => {\r\n\t\t\treturn monster.name\r\n\t\t\t\t.toLowerCase()\r\n\t\t\t\t.includes(searchMonstersField.toLowerCase());\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<SearchBox\r\n\t\t\t\t\tplaceholder=\"search monsters\"\r\n\t\t\t\t\thandleChange={this.handleSearchBoxChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<h6>{this.state.searchMonstersField}</h6>\r\n\t\t\t\t<br />\r\n\t\t\t\t<CardList monsters={filteredMonsters} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}